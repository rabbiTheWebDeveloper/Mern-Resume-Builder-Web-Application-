{"version":3,"file":"static/js/544.611a1409.chunk.js","mappings":"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","sources":["APIRequest/RestClient.js","APIRequest/UserRequest.js","components/Recovery/ResetPassword.jsx","helper/ToastMessage.js"],"sourcesContent":["//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/UserSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.GetToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//Internal Import\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetUserDetails } from \"../redux/slices/UserSlice\";\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\n\r\nclass UserRequest {\r\n  static async UserDetails() {\r\n    const { data } = await RestClient.getRequest(\"/User/UserDetails\");\r\n    if (data) {\r\n      store.dispatch(SetUserDetails(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async SendRecoveryOtp(Email) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/SendRecoveryOtp/${Email}`,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      SessionHelper.SetOtpEmail(Email);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyRecoveryOtp(Otp) {\r\n    const Email = SessionHelper.GetOtpEmail();\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyRecoveryOtp/${Email}/${Otp}`,\r\n    );\r\n    if (data) {\r\n      SessionHelper.SetOtpCode(Otp);\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async RecoveryResetPass(PostBody) {\r\n    const Email = SessionHelper.GetOtpEmail();\r\n    const Otp = SessionHelper.GetOtpCode();\r\n    const { data } = await RestClient.postRequest(\r\n      `/User/RecoveryResetPass/${Email}/${Otp}`,\r\n      PostBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyAccountSentOtp() {\r\n    const Email = SessionHelper.GetVerifyEmail();\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyAccountSentOtp/${Email}`,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyAccountVerifyOtp(Email, Otp) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyAccountVerifyOtp/${Email}/${Otp}`,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserUpdate(PostBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      `/User/UserUpdate`,\r\n      PostBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserChangePassword(PostBody) {\r\n    const { data } = await RestClient.putRequest(\r\n      `/User/UserChangePassword`,\r\n      PostBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserRequest;\r\n","//External Lib Import\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\n//Internal Lib Import\r\nimport UserRequest from \"../../APIRequest/UserRequest\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  Password: Yup.string().required(\"Password is Required\"),\r\n  ConfirmPassword: Yup.string()\r\n    .required(\"Confirm Password is required\")\r\n    .oneOf(\r\n      [Yup.ref(\"Password\"), null],\r\n      \"Passwords and Confirm Password must match\",\r\n    ),\r\n});\r\n\r\nconst ResetPassword = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"padding-top-90 padding-bottom-90 access-page-bg\">\r\n      <Container>\r\n        <Row>\r\n          <Col xl={4} md={6}>\r\n            <div className=\"access-form\">\r\n              <div className=\"form-header\">\r\n                <h5>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width={24}\r\n                    height={24}\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth={2}\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    className=\"feather feather-user\"\r\n                  >\r\n                    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\r\n                    <circle cx={12} cy={7} r={4} />\r\n                  </svg>\r\n                  Reset Password\r\n                </h5>\r\n              </div>\r\n\r\n              <Formik\r\n                initialValues={{\r\n                  Password: \"\",\r\n                  ConfirmPassword: \"\",\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, actions) => {\r\n                  console.log(values);\r\n                  UserRequest.RecoveryResetPass(values).then((result) => {\r\n                    if (result) {\r\n                      navigate(\"/login\");\r\n                    }\r\n                  });\r\n                }}\r\n              >\r\n                {(props) => (\r\n                  <Form>\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <Field>\r\n                          {({\r\n                            field,\r\n                            form: { touched, errors, values, setFieldValue },\r\n                            meta,\r\n                          }) => (\r\n                            <div className=\"form-group\">\r\n                              <Field\r\n                                name=\"Password\"\r\n                                type=\"password\"\r\n                                placeholder=\"New Password\"\r\n                                className={\r\n                                  errors.Password && touched.Password\r\n                                    ? \"form-control is-invalid\"\r\n                                    : \"form-control\"\r\n                                }\r\n                              />\r\n                            </div>\r\n                          )}\r\n                        </Field>\r\n                      </Col>\r\n                      <Col md={12}>\r\n                        <Field>\r\n                          {({\r\n                            field,\r\n                            form: { touched, errors, values, setFieldValue },\r\n                            meta,\r\n                          }) => (\r\n                            <div className=\"form-group\">\r\n                              <Field\r\n                                name=\"ConfirmPassword\"\r\n                                type=\"password\"\r\n                                placeholder=\"Confirm New Password\"\r\n                                className={\r\n                                  errors.ConfirmPassword &&\r\n                                  touched.ConfirmPassword\r\n                                    ? \"form-control is-invalid\"\r\n                                    : \"form-control\"\r\n                                }\r\n                              />\r\n                            </div>\r\n                          )}\r\n                        </Field>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"button primary-bg btn-block\"\r\n                    >\r\n                      Reset Password\r\n                    </button>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","//external import\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return toast.success(msg, {\r\n      position: \"top-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return toast.error(msg, {\r\n      position: \"top-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["axiosHeaders","axios","SessionHelper","ResponseReturn","response","store","RemoveLoading","ErrorReturn","error","status","ToastMessage","data","message","SetLogout","RemoveUserDetails","RestClient","url","SetLoading","then","catch","postBody","UserRequest","SetUserDetails","Email","Otp","PostBody","validationSchema","Yup","shape","Password","required","ConfirmPassword","oneOf","navigate","useNavigate","className","xl","md","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","initialValues","onSubmit","values","actions","console","log","result","props","field","form","touched","errors","setFieldValue","meta","name","type","placeholder","msg","toast","position"],"sourceRoot":""}